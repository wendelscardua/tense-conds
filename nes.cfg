MEMORY {
#RAM Addresses:
    # Zero page
    ZP: start = $00, size = $100, type = rw, define = yes;
    #note, the c compiler + neslib + famitone2 use about 60 zp addresses, I think

    OAM: start = $0200, size = $0100, define = yes;
    #note, sprites stored here in the RAM

    RAM: start = $0300, size = $0400, define = yes;
    #note VRAM_BUFFER: start = $700, size = 128, define = yes;

#INES Header:
    HEADER: start = $0, size = $10, file = %O ,fill = yes;


#ROM Addresses:
    PRG1: start = $8000, size = $4000, file = %O ,fill = yes, define = yes, bank = 0;
    PRG2: start = $8000, size = $4000, file = %O ,fill = yes, define = yes, bank = 1;
    PRG3: start = $8000, size = $4000, file = %O ,fill = yes, define = yes, bank = 2;
    PRGLAST: start = $c000, size = $4000, file = %O ,fill = yes, define = yes, bank = 3;
}

SEGMENTS {
    HEADER:   load = HEADER,             type = ro;

    ZEROPAGE: load = ZP,                 type = zp;
    HEAP:     load = RAM,                type = bss, optional = yes;
    BSS:      load = RAM,                type = bss, define = yes;

    STARTUP:  load = PRGLAST,            type = ro,  define = yes;
    CODE:     load = PRGLAST,            type = ro,  define = yes;
    INIT:     load = PRGLAST,            type = ro,  define = yes, optional = yes;
    LOWCODE:  load = PRGLAST,            type = ro,  optional = yes;
    DATA:     load = PRGLAST, run = RAM, type = rw,  define = yes;
    ONCE:     load = PRGLAST,            type = ro,  define = yes, optional = yes;

    RODATA:   load = PRG1,               type = ro,  define = yes;

    MUSIC:    load = PRG3,               type = ro, define = yes, optional = yes;

    BANK1:    load = PRG1,               type = ro,  define = yes, optional = yes;
    BANK2:    load = PRG2,               type = ro,  define = yes, optional = yes;
    BANK3:    load = PRG3,               type = ro,  define = yes, optional = yes;

    SAMPLES:  load = PRGLAST, start = $f000, type = ro, optional = yes;
    VECTORS:  load = PRGLAST, start = $fffa, type = ro;
}

SYMBOLS {
    __STACKSIZE__: type = weak, value = $0100;     # 1 page stack
    __STACK_START__: type = weak, value = $0700;

    NES_MAPPER:  type = weak, value = 2; # mapper number
    NES_PRG_BANKS: type = weak,  value = 4; # number of 16K PRG banks
    NES_CHR_BANKS:  type = weak, value = 0; # number of 8K CHR banks
    NES_MIRRORING:  type = weak, value = 1; # 0 horizontal, 1 vertical, 8 four screen
}
