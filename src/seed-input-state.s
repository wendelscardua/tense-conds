;
; File generated by cc65 v 2.19 - Git 884f72637
;
	.fopt		compiler,"cc65 v 2.19 - Git 884f72637"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	on
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.dbg		file, "src/seed-input-state.c", 3006, 1664821487
	.dbg		file, "src/lib/neslib.h", 8412, 1664622739
	.dbg		file, "src/lib/nesdoug.h", 6542, 1664622739
	.dbg		file, "src/lib/donut.h", 201, 1664622739
	.dbg		file, "src/chr-data.h", 252, 1664631226
	.dbg		file, "src/gamestate.h", 443, 1664819746
	.dbg		file, "src/title-state.h", 136, 1664622739
	.dbg		file, "src/metasprites.h", 232, 1664768434
	.dbg		file, "src/palettes.h", 134, 1664622739
	.dbg		file, "src/nametables.h", 236, 1664819528
	.dbg		file, "src/globals.h", 543, 1664622739
	.dbg		file, "src/ggsound/ggsound-api.h", 680, 1664622739
	.dbg		file, "src/ggsound/../lib/unrom.h", 168, 1664622739
	.dbg		file, "src/music/soundtrack.h", 253, 1664622739
	.dbg		sym, "pal_bg", "00", extern, "_pal_bg"
	.dbg		sym, "pal_spr", "00", extern, "_pal_spr"
	.dbg		sym, "ppu_off", "00", extern, "_ppu_off"
	.dbg		sym, "ppu_on_all", "00", extern, "_ppu_on_all"
	.dbg		sym, "oam_clear", "00", extern, "_oam_clear"
	.dbg		sym, "oam_size", "00", extern, "_oam_size"
	.dbg		sym, "oam_spr", "00", extern, "_oam_spr"
	.dbg		sym, "pad_poll", "00", extern, "_pad_poll"
	.dbg		sym, "pad_state", "00", extern, "_pad_state"
	.dbg		sym, "rand16", "00", extern, "_rand16"
	.dbg		sym, "vram_adr", "00", extern, "_vram_adr"
	.dbg		sym, "one_vram_buffer", "00", extern, "_one_vram_buffer"
	.dbg		sym, "get_pad_new", "00", extern, "_get_pad_new"
	.dbg		sym, "flush_vram_update2", "00", extern, "_flush_vram_update2"
	.dbg		sym, "donut_stream_ptr", "00", extern, "_donut_stream_ptr"
	.dbg		sym, "donut_decompress_to_ppu", "00", extern, "_donut_decompress_to_ppu"
	.dbg		sym, "gameplay_bg_chr", "00", extern, "_gameplay_bg_chr"
	.dbg		sym, "gameplay_spr_chr", "00", extern, "_gameplay_spr_chr"
	.dbg		sym, "rng_seed", "00", extern, "_rng_seed"
	.dbg		sym, "fixed_seed", "00", extern, "_fixed_seed"
	.dbg		sym, "gamestate_transition", "00", extern, "_gamestate_transition"
	.dbg		sym, "gameplay_bg_palette", "00", extern, "_gameplay_bg_palette"
	.dbg		sym, "gameplay_spr_palette", "00", extern, "_gameplay_spr_palette"
	.dbg		sym, "seed_input_screen", "00", extern, "_seed_input_screen"
	.dbg		sym, "temp", "00", extern, "_temp"
	.dbg		sym, "i", "00", extern, "_i"
	.dbg		sym, "temp_int", "00", extern, "_temp_int"
	.dbg		sym, "pad", "00", extern, "_pad"
	.dbg		sym, "pad_new", "00", extern, "_pad_new"
	.dbg		sym, "farcall", "00", extern, "_farcall"
	.dbg		sym, "ggsound_play_song", "00", extern, "_ggsound_play_song"
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_size
	.import		_oam_spr
	.import		_pad_poll
	.import		_pad_state
	.import		_rand16
	.import		_vram_adr
	.import		_one_vram_buffer
	.import		_get_pad_new
	.import		_flush_vram_update2
	.importzp	_donut_stream_ptr
	.import		_donut_decompress_to_ppu
	.import		_gameplay_bg_chr
	.import		_gameplay_spr_chr
	.importzp	_rng_seed
	.importzp	_fixed_seed
	.import		_gamestate_transition
	.import		_gameplay_bg_palette
	.import		_gameplay_spr_palette
	.import		_seed_input_screen
	.importzp	_temp
	.importzp	_i
	.importzp	_temp_int
	.importzp	_pad
	.importzp	_pad_new
	.import		_farcall
	.import		_ggsound_play_song
	.export		_refresh_seed
	.export		_seed_input_state_init
	.export		_seed_input_state_deinit
	.export		_seed_input_state_update

; ---------------------------------------------------------------
; void __near__ refresh_seed (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_refresh_seed: near

	.dbg	func, "refresh_seed", "00", extern, "_refresh_seed"

.segment	"CODE"

;
; temp = rng_seed & 0b1111;
;
	.dbg	line, "src/seed-input-state.c", 15
	lda     _rng_seed
	and     #$0F
	sta     _temp
;
; if (temp <= 9) {
;
	.dbg	line, "src/seed-input-state.c", 16
	cmp     #$0A
	bcs     L001A
;
; one_vram_buffer(temp + 0x10, NTADR_A(9, 14));
;
	.dbg	line, "src/seed-input-state.c", 17
	lda     _temp
	clc
	adc     #$10
;
; } else {
;
	.dbg	line, "src/seed-input-state.c", 18
	jmp     L0026
;
; one_vram_buffer(temp - 10 + 0x21, NTADR_A(9, 14));
;
	.dbg	line, "src/seed-input-state.c", 19
L001A:	lda     _temp
	sec
	sbc     #$0A
	clc
	adc     #$21
L0026:	jsr     pusha
	ldx     #$21
	lda     #$C9
	jsr     _one_vram_buffer
;
; temp = (rng_seed >> 4) & 0b1111;
;
	.dbg	line, "src/seed-input-state.c", 22
	lda     _rng_seed
	ldx     _rng_seed+1
	jsr     shrax4
	and     #$0F
	sta     _temp
;
; if (temp <= 9) {
;
	.dbg	line, "src/seed-input-state.c", 23
	cmp     #$0A
	bcs     L001B
;
; one_vram_buffer(temp + 0x10, NTADR_A(8, 14));
;
	.dbg	line, "src/seed-input-state.c", 24
	lda     _temp
	clc
	adc     #$10
;
; } else {
;
	.dbg	line, "src/seed-input-state.c", 25
	jmp     L0027
;
; one_vram_buffer(temp - 10 + 0x21, NTADR_A(8, 14));
;
	.dbg	line, "src/seed-input-state.c", 26
L001B:	lda     _temp
	sec
	sbc     #$0A
	clc
	adc     #$21
L0027:	jsr     pusha
	ldx     #$21
	lda     #$C8
	jsr     _one_vram_buffer
;
; temp = (rng_seed >> 8) & 0b1111;
;
	.dbg	line, "src/seed-input-state.c", 29
	lda     _rng_seed+1
	and     #$0F
	sta     _temp
;
; if (temp <= 9) {
;
	.dbg	line, "src/seed-input-state.c", 30
	cmp     #$0A
	bcs     L001C
;
; one_vram_buffer(temp + 0x10, NTADR_A(7, 14));
;
	.dbg	line, "src/seed-input-state.c", 31
	lda     _temp
	clc
	adc     #$10
;
; } else {
;
	.dbg	line, "src/seed-input-state.c", 32
	jmp     L0028
;
; one_vram_buffer(temp - 10 + 0x21, NTADR_A(7, 14));
;
	.dbg	line, "src/seed-input-state.c", 33
L001C:	lda     _temp
	sec
	sbc     #$0A
	clc
	adc     #$21
L0028:	jsr     pusha
	ldx     #$21
	lda     #$C7
	jsr     _one_vram_buffer
;
; temp = (rng_seed >> 12) & 0b1111;
;
	.dbg	line, "src/seed-input-state.c", 36
	lda     _rng_seed+1
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	and     #$0F
	sta     _temp
;
; if (temp <= 9) {
;
	.dbg	line, "src/seed-input-state.c", 37
	cmp     #$0A
	bcs     L001D
;
; one_vram_buffer(temp + 0x10, NTADR_A(6, 14));
;
	.dbg	line, "src/seed-input-state.c", 38
	lda     _temp
	clc
	adc     #$10
;
; } else {
;
	.dbg	line, "src/seed-input-state.c", 39
	jmp     L0029
;
; one_vram_buffer(temp - 10 + 0x21, NTADR_A(6, 14));
;
	.dbg	line, "src/seed-input-state.c", 40
L001D:	lda     _temp
	sec
	sbc     #$0A
	clc
	adc     #$21
L0029:	jsr     pusha
	ldx     #$21
	lda     #$C6
	jmp     _one_vram_buffer

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ seed_input_state_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_seed_input_state_init: near

	.dbg	func, "seed_input_state_init", "00", extern, "_seed_input_state_init"

.segment	"CODE"

;
; oam_size(0);
;
	.dbg	line, "src/seed-input-state.c", 45
	lda     #$00
	jsr     _oam_size
;
; pal_bg(gameplay_bg_palette);
;
	.dbg	line, "src/seed-input-state.c", 47
	lda     #<(_gameplay_bg_palette)
	ldx     #>(_gameplay_bg_palette)
	jsr     _pal_bg
;
; pal_spr(gameplay_spr_palette);
;
	.dbg	line, "src/seed-input-state.c", 48
	lda     #<(_gameplay_spr_palette)
	ldx     #>(_gameplay_spr_palette)
	jsr     _pal_spr
;
; vram_adr(PPU_PATTERN_TABLE_0);
;
	.dbg	line, "src/seed-input-state.c", 50
	ldx     #$00
	txa
	jsr     _vram_adr
;
; donut_stream_ptr = &gameplay_bg_chr;
;
	.dbg	line, "src/seed-input-state.c", 51
	lda     #>(_gameplay_bg_chr)
	sta     _donut_stream_ptr+1
	lda     #<(_gameplay_bg_chr)
	sta     _donut_stream_ptr
;
; donut_decompress_to_ppu(PPU_PATTERN_TABLE_SIZE / 64);
;
	.dbg	line, "src/seed-input-state.c", 52
	ldx     #$00
	lda     #$40
	jsr     _donut_decompress_to_ppu
;
; vram_adr(PPU_PATTERN_TABLE_1);
;
	.dbg	line, "src/seed-input-state.c", 54
	ldx     #$10
	lda     #$00
	jsr     _vram_adr
;
; donut_stream_ptr = &gameplay_spr_chr;
;
	.dbg	line, "src/seed-input-state.c", 55
	lda     #>(_gameplay_spr_chr)
	sta     _donut_stream_ptr+1
	lda     #<(_gameplay_spr_chr)
	sta     _donut_stream_ptr
;
; donut_decompress_to_ppu(PPU_PATTERN_TABLE_SIZE / 64);
;
	.dbg	line, "src/seed-input-state.c", 56
	ldx     #$00
	lda     #$40
	jsr     _donut_decompress_to_ppu
;
; vram_adr(NTADR_A(0,0));
;
	.dbg	line, "src/seed-input-state.c", 58
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; donut_stream_ptr = &seed_input_screen;
;
	.dbg	line, "src/seed-input-state.c", 59
	lda     #>(_seed_input_screen)
	sta     _donut_stream_ptr+1
	lda     #<(_seed_input_screen)
	sta     _donut_stream_ptr
;
; donut_decompress_to_ppu(1024 / 64);
;
	.dbg	line, "src/seed-input-state.c", 60
	ldx     #$00
	lda     #$10
	jsr     _donut_decompress_to_ppu
;
; if (!fixed_seed) {
;
	.dbg	line, "src/seed-input-state.c", 62
	lda     _fixed_seed
	bne     L0002
;
; rng_seed = rand16();
;
	.dbg	line, "src/seed-input-state.c", 63
	jsr     _rand16
	sta     _rng_seed
	stx     _rng_seed+1
;
; refresh_seed();
;
	.dbg	line, "src/seed-input-state.c", 66
L0002:	jsr     _refresh_seed
;
; flush_vram_update2();
;
	.dbg	line, "src/seed-input-state.c", 67
	jsr     _flush_vram_update2
;
; i = 0;
;
	.dbg	line, "src/seed-input-state.c", 70
	lda     #$00
	sta     _i
;
; ppu_on_all();
;
	.dbg	line, "src/seed-input-state.c", 73
	jsr     _ppu_on_all
;
; ggsound_play_song(song_no_music);
;
	.dbg	line, "src/seed-input-state.c", 75
	ldx     #$00
	txa
	ldy     #<.bank(_ggsound_play_song)
	sty     tmp4
	ldy     #<(_ggsound_play_song)
	sty     ptr4
	ldy     #>(_ggsound_play_song)
	sty     ptr4+1
	jmp     _farcall

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ seed_input_state_deinit (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_seed_input_state_deinit: near

	.dbg	func, "seed_input_state_deinit", "00", extern, "_seed_input_state_deinit"

.segment	"CODE"

;
; ppu_off();
;
	.dbg	line, "src/seed-input-state.c", 80
	jmp     _ppu_off

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ seed_input_state_update (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_seed_input_state_update: near

	.dbg	func, "seed_input_state_update", "00", extern, "_seed_input_state_update"

.segment	"CODE"

;
; oam_clear();
;
	.dbg	line, "src/seed-input-state.c", 84
	jsr     _oam_clear
;
; pad_poll(0);
;
	.dbg	line, "src/seed-input-state.c", 86
	lda     #$00
	jsr     _pad_poll
;
; pad = pad_state(0);
;
	.dbg	line, "src/seed-input-state.c", 87
	lda     #$00
	jsr     _pad_state
	sta     _pad
;
; pad_new = get_pad_new(0);
;
	.dbg	line, "src/seed-input-state.c", 88
	lda     #$00
	jsr     _get_pad_new
	sta     _pad_new
;
; if (pad_new & PAD_LEFT) {
;
	.dbg	line, "src/seed-input-state.c", 90
	and     #$02
	beq     L0019
;
; if (i == 0) i = 5;
;
	.dbg	line, "src/seed-input-state.c", 91
	lda     _i
	bne     L0018
	lda     #$05
	sta     _i
;
; else i--;
;
	.dbg	line, "src/seed-input-state.c", 92
	jmp     L001B
L0018:	dec     _i
;
; } else if (pad_new & (PAD_RIGHT | PAD_SELECT)) {
;
	.dbg	line, "src/seed-input-state.c", 93
	jmp     L001B
L0019:	lda     _pad_new
	and     #$21
	beq     L001B
;
; if (i == 5) i = 0;
;
	.dbg	line, "src/seed-input-state.c", 94
	lda     _i
	cmp     #$05
	bne     L001A
	lda     #$00
	sta     _i
;
; else i++;
;
	.dbg	line, "src/seed-input-state.c", 95
	jmp     L001B
L001A:	inc     _i
;
; if (i < 4) {
;
	.dbg	line, "src/seed-input-state.c", 98
L001B:	lda     _i
	cmp     #$04
	jcs     L001D
;
; oam_spr(0x30 + 0x08 * i, 0x67, 0x31, 0x02);
;
	.dbg	line, "src/seed-input-state.c", 99
	jsr     decsp3
	lda     _i
	asl     a
	asl     a
	asl     a
	clc
	adc     #$30
	ldy     #$02
	sta     (sp),y
	lda     #$67
	dey
	sta     (sp),y
	lda     #$31
	dey
	sta     (sp),y
	lda     #$02
	jsr     _oam_spr
;
; oam_spr(0x30 + 0x08 * i, 0x77, 0x32, 0x02);
;
	.dbg	line, "src/seed-input-state.c", 100
	jsr     decsp3
	lda     _i
	asl     a
	asl     a
	asl     a
	clc
	adc     #$30
	ldy     #$02
	sta     (sp),y
	lda     #$77
	dey
	sta     (sp),y
	lda     #$32
	dey
	sta     (sp),y
	lda     #$02
	jsr     _oam_spr
;
; if (pad_new & (PAD_UP | PAD_A)) {
;
	.dbg	line, "src/seed-input-state.c", 102
	lda     _pad_new
	and     #$88
	beq     L001C
;
; temp_int = (0xf << (4 * (3 - i)));
;
	.dbg	line, "src/seed-input-state.c", 103
	ldx     #$00
	lda     #$03
	sec
	sbc     _i
	asl     a
	asl     a
	tay
	lda     #$0F
	jsr     aslaxy
	sta     _temp_int
	stx     _temp_int+1
;
; rng_seed = (rng_seed & ~temp_int) | (((rng_seed & temp_int) + 0x1111) & temp_int);
;
	.dbg	line, "src/seed-input-state.c", 104
	lda     _temp_int
	ldx     _temp_int+1
	jsr     complax
	and     _rng_seed
	sta     sreg
	txa
	and     _rng_seed+1
	sta     sreg+1
	lda     _temp_int
	and     _rng_seed
	pha
	lda     _temp_int+1
	and     _rng_seed+1
	tax
	pla
	clc
	adc     #$11
	sta     ptr1
	txa
	adc     #$11
	sta     ptr1+1
	lda     _temp_int
	and     ptr1
	pha
	lda     _temp_int+1
	and     ptr1+1
	tax
	pla
	ora     sreg
	sta     _rng_seed
	txa
	ora     sreg+1
	sta     _rng_seed+1
;
; refresh_seed();
;
	.dbg	line, "src/seed-input-state.c", 105
	jsr     _refresh_seed
;
; if (pad_new & PAD_DOWN) {
;
	.dbg	line, "src/seed-input-state.c", 107
L001C:	lda     _pad_new
	and     #$04
	jeq     L001E
;
; temp_int = (0xf << (4 * (3 - i)));
;
	.dbg	line, "src/seed-input-state.c", 108
	ldx     #$00
	lda     #$03
	sec
	sbc     _i
	asl     a
	asl     a
	tay
	lda     #$0F
	jsr     aslaxy
	sta     _temp_int
	stx     _temp_int+1
;
; rng_seed = (rng_seed & ~temp_int) | (((rng_seed & temp_int) + 0xffff) & temp_int);
;
	.dbg	line, "src/seed-input-state.c", 109
	lda     _temp_int
	ldx     _temp_int+1
	jsr     complax
	and     _rng_seed
	sta     sreg
	txa
	and     _rng_seed+1
	sta     sreg+1
	lda     _temp_int
	and     _rng_seed
	pha
	lda     _temp_int+1
	and     _rng_seed+1
	tax
	pla
	clc
	adc     #$FF
	sta     ptr1
	txa
	adc     #$FF
	sta     ptr1+1
	lda     _temp_int
	and     ptr1
	pha
	lda     _temp_int+1
	and     ptr1+1
	tax
	pla
	ora     sreg
	sta     _rng_seed
	txa
	ora     sreg+1
	sta     _rng_seed+1
;
; refresh_seed();
;
	.dbg	line, "src/seed-input-state.c", 110
	jsr     _refresh_seed
;
; } else if (i == 4) {
;
	.dbg	line, "src/seed-input-state.c", 112
	jmp     L001E
L001D:	lda     _i
	cmp     #$04
	bne     L000F
;
; oam_spr(0x58, 0x6f, 0x30, 0x03);
;
	.dbg	line, "src/seed-input-state.c", 113
	jsr     decsp3
	lda     #$58
	ldy     #$02
	sta     (sp),y
	lda     #$6F
	dey
	sta     (sp),y
	lda     #$30
	dey
	sta     (sp),y
	lda     #$03
	jsr     _oam_spr
;
; if (pad_new & (PAD_A | PAD_START)) {
;
	.dbg	line, "src/seed-input-state.c", 115
	lda     _pad_new
	and     #$90
	beq     L001E
;
; fixed_seed = 1;
;
	.dbg	line, "src/seed-input-state.c", 116
	lda     #$01
	sta     _fixed_seed
;
; } else {
;
	.dbg	line, "src/seed-input-state.c", 119
	jmp     L001F
;
; oam_spr(0x78, 0x6f, 0x30, 0x03);
;
	.dbg	line, "src/seed-input-state.c", 120
L000F:	jsr     decsp3
	lda     #$78
	ldy     #$02
	sta     (sp),y
	lda     #$6F
	dey
	sta     (sp),y
	lda     #$30
	dey
	sta     (sp),y
	lda     #$03
	jsr     _oam_spr
;
; if (pad_new & (PAD_A | PAD_START)) {
;
	.dbg	line, "src/seed-input-state.c", 122
	lda     _pad_new
	and     #$90
	beq     L001E
;
; gamestate_transition(TitleState);
;
	.dbg	line, "src/seed-input-state.c", 123
L001F:	lda     #$00
	jsr     _gamestate_transition
;
; switch(i) {
;
	.dbg	line, "src/seed-input-state.c", 127
L001E:	lda     _i
;
; }
;
	.dbg	line, "src/seed-input-state.c", 134
	beq     L0014
	cmp     #$01
	bne     L0014
;
; oam_spr(0x31, 0xbf, 0x30, 0x02);
;
	.dbg	line, "src/seed-input-state.c", 132
	jsr     decsp3
	lda     #$31
	ldy     #$02
	sta     (sp),y
	lda     #$BF
	dey
	sta     (sp),y
	lda     #$30
	dey
	sta     (sp),y
	lda     #$02
	jmp     _oam_spr
;
; }
;
	.dbg	line, "src/seed-input-state.c", 135
L0014:	rts

	.dbg	line
.endproc

